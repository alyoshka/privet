package main

import (
	"errors"
	"flag"
	"fmt"
	"log"
	"strings"

	"github.com/go-telegram-bot-api/telegram-bot-api"
)

func process(update tgbotapi.Update) (answer tgbotapi.MessageConfig, err error) {
	if update.Message == nil {
		err = errors.New("empty")
		return
	}

	if update.Message.LeftChatMember != nil {
		return tgbotapi.NewMessage(update.Message.Chat.ID, "–ù—É —Ç—ã —á–µ–≥–æ? –ù–æ—Ä–º–∞–ª—å–Ω–æ –∂–µ –æ–±—â–∞–ª–∏—Å—å"), nil
	}

	if update.Message.NewChatMember != nil {
		var name string
		if update.Message.NewChatMember.FirstName != "" {
			name = update.Message.NewChatMember.FirstName
		} else {
			name = update.Message.NewChatMember.UserName
		}
		message := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ –∏ –æ –ø—Ä–æ–µ–∫—Ç–µ, –æ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–º –ø–æ—á—Ç–∏ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç!", name)
		return tgbotapi.NewMessage(update.Message.Chat.ID, message), nil
	}

	msgText := strings.ToLower(strings.TrimSpace(update.Message.Text))

	if strings.Contains(msgText, "–∫ –Ω–æ–≥–µ") && update.Message.From.UserName == "just_alyosha" {
		return tgbotapi.NewMessage(update.Message.Chat.ID, "üêï"), nil
	} else if strings.Contains(msgText, "–ø—Ä–∏–≤–µ—Ç") {
		var msg tgbotapi.MessageConfig
		if update.Message.From.UserName == "ainomc" {
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ú–∏—à–∞, –æ—Ç—Å—Ç–∞–Ω—å")
		} else {
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ø—Ä–∏–≤–µ—Ç")
		}
		return msg, nil
	}
	err = errors.New("empty")
	return
}

func main() {
	token := flag.String("token", "", "Telegram api token.")
	flag.Parse()
	if *token == "" {
		log.Fatal("token is empty")
	}
	bot, err := tgbotapi.NewBotAPI(*token)
	if err != nil {
		log.Panic(err)
	}

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, _ := bot.GetUpdatesChan(u)

	for update := range updates {
		if msg, err := process(update); err == nil {
			bot.Send(msg)
		}
	}
}
